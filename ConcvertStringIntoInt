class Solution {
    public int myAtoi(String s) {
         int i = 0;
        int sign = 1;
        int result = 0;

        // Step 1: Read in and ignore any leading whitespace.
        while (i < s.length() && s.charAt(i) == ' ') {
            i++;
        }

        // Step 2: Check for '+' or '-' to determine the sign.
        if (i < s.length() && (s.charAt(i) == '+' || s.charAt(i) == '-')) {
            sign = (s.charAt(i) == '-') ? -1 : 1;
            i++;
        }

        // Step 3: Read in the characters until the next non-digit character or the end.
        while (i < s.length() && Character.isDigit(s.charAt(i))) {
            int digit = Character.getNumericValue(s.charAt(i));

            // Integer overflow check
            if (result > (Integer.MAX_VALUE - digit) / 10) {
                return (sign == 1) ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }

            result = result * 10 + digit;
            i++;
        }

        // Step 5: Clamp the integer to the 32-bit signed integer range.
        return sign * result;
    }
}
